//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceApp.MyServiceLibrary {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MyServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbonementBasic", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data.Abonements")]
    [System.SerializableAttribute()]
    public partial class AbonementBasic : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbonementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BuyActivationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaysLeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfServiceApp.MyServiceLibrary.FreezeClass FreezeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InfoMessageEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActivatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumAerobicTrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumMiniGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumPersonalTrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfServiceApp.MyServiceLibrary.Pay PayStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfServiceApp.MyServiceLibrary.SpaService SpaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfServiceApp.MyServiceLibrary.TimeForTr TimeTrainingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WcfServiceApp.MyServiceLibrary.TypeWorkout TypeWorkoutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AbonementName {
            get {
                return this.AbonementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AbonementNameField, value) != true)) {
                    this.AbonementNameField = value;
                    this.RaisePropertyChanged("AbonementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BuyActivationDate {
            get {
                return this.BuyActivationDateField;
            }
            set {
                if ((this.BuyActivationDateField.Equals(value) != true)) {
                    this.BuyActivationDateField = value;
                    this.RaisePropertyChanged("BuyActivationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaysLeft {
            get {
                return this.DaysLeftField;
            }
            set {
                if ((this.DaysLeftField.Equals(value) != true)) {
                    this.DaysLeftField = value;
                    this.RaisePropertyChanged("DaysLeft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfServiceApp.MyServiceLibrary.FreezeClass Freeze {
            get {
                return this.FreezeField;
            }
            set {
                if ((object.ReferenceEquals(this.FreezeField, value) != true)) {
                    this.FreezeField = value;
                    this.RaisePropertyChanged("Freeze");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InfoMessageEnd {
            get {
                return this.InfoMessageEndField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoMessageEndField, value) != true)) {
                    this.InfoMessageEndField = value;
                    this.RaisePropertyChanged("InfoMessageEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActivated {
            get {
                return this.IsActivatedField;
            }
            set {
                if ((this.IsActivatedField.Equals(value) != true)) {
                    this.IsActivatedField = value;
                    this.RaisePropertyChanged("IsActivated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumAerobicTr {
            get {
                return this.NumAerobicTrField;
            }
            set {
                if ((this.NumAerobicTrField.Equals(value) != true)) {
                    this.NumAerobicTrField = value;
                    this.RaisePropertyChanged("NumAerobicTr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumMiniGroup {
            get {
                return this.NumMiniGroupField;
            }
            set {
                if ((this.NumMiniGroupField.Equals(value) != true)) {
                    this.NumMiniGroupField = value;
                    this.RaisePropertyChanged("NumMiniGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumPersonalTr {
            get {
                return this.NumPersonalTrField;
            }
            set {
                if ((this.NumPersonalTrField.Equals(value) != true)) {
                    this.NumPersonalTrField = value;
                    this.RaisePropertyChanged("NumPersonalTr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfServiceApp.MyServiceLibrary.Pay PayStatus {
            get {
                return this.PayStatusField;
            }
            set {
                if ((this.PayStatusField.Equals(value) != true)) {
                    this.PayStatusField = value;
                    this.RaisePropertyChanged("PayStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfServiceApp.MyServiceLibrary.SpaService Spa {
            get {
                return this.SpaField;
            }
            set {
                if ((this.SpaField.Equals(value) != true)) {
                    this.SpaField = value;
                    this.RaisePropertyChanged("Spa");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfServiceApp.MyServiceLibrary.TimeForTr TimeTraining {
            get {
                return this.TimeTrainingField;
            }
            set {
                if ((this.TimeTrainingField.Equals(value) != true)) {
                    this.TimeTrainingField = value;
                    this.RaisePropertyChanged("TimeTraining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WcfServiceApp.MyServiceLibrary.TypeWorkout TypeWorkout {
            get {
                return this.TypeWorkoutField;
            }
            set {
                if ((this.TypeWorkoutField.Equals(value) != true)) {
                    this.TypeWorkoutField = value;
                    this.RaisePropertyChanged("TypeWorkout");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreezeClass", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data.Abonements")]
    [System.SerializableAttribute()]
    public partial class FreezeClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private WcfServiceApp.MyServiceLibrary.FreezePeriod[] AllFreezesField;
        
        private int _maxDaysAvailableField;
        
        private int _totalDaysFreezedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public WcfServiceApp.MyServiceLibrary.FreezePeriod[] AllFreezes {
            get {
                return this.AllFreezesField;
            }
            set {
                if ((object.ReferenceEquals(this.AllFreezesField, value) != true)) {
                    this.AllFreezesField = value;
                    this.RaisePropertyChanged("AllFreezes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _maxDaysAvailable {
            get {
                return this._maxDaysAvailableField;
            }
            set {
                if ((this._maxDaysAvailableField.Equals(value) != true)) {
                    this._maxDaysAvailableField = value;
                    this.RaisePropertyChanged("_maxDaysAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _totalDaysFreezed {
            get {
                return this._totalDaysFreezedField;
            }
            set {
                if ((this._totalDaysFreezedField.Equals(value) != true)) {
                    this._totalDaysFreezedField = value;
                    this.RaisePropertyChanged("_totalDaysFreezed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pay", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data")]
    public enum Pay : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Не_Оплачено = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Оплачено = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpaService", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data")]
    public enum SpaService : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Без_Спа = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Спа = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeForTr", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data")]
    public enum TimeForTr : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Утро = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Весь_День = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeWorkout", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data")]
    public enum TypeWorkout : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Тренажерный_Зал = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Аэробный_Зал = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Персональная = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        МиниГруппа = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreezePeriod", Namespace="http://schemas.datacontract.org/2004/07/PersonsBase.data.Abonements")]
    [System.SerializableAttribute()]
    public partial class FreezePeriod : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime _startDateField;
        
        private int DaysToFreezek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime _startDate {
            get {
                return this._startDateField;
            }
            set {
                if ((this._startDateField.Equals(value) != true)) {
                    this._startDateField = value;
                    this.RaisePropertyChanged("_startDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<DaysToFreeze>k__BackingField", IsRequired=true)]
        public int DaysToFreezek__BackingField {
            get {
                return this.DaysToFreezek__BackingFieldField;
            }
            set {
                if ((this.DaysToFreezek__BackingFieldField.Equals(value) != true)) {
                    this.DaysToFreezek__BackingFieldField = value;
                    this.RaisePropertyChanged("DaysToFreezek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceLibrary.IConnectService")]
    public interface IConnectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetData", ReplyAction="http://tempuri.org/IConnectService/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetData", ReplyAction="http://tempuri.org/IConnectService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IConnectService/GetDataUsingDataContractResponse")]
        WcfServiceApp.MyServiceLibrary.CompositeType GetDataUsingDataContract(WcfServiceApp.MyServiceLibrary.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IConnectService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WcfServiceApp.MyServiceLibrary.CompositeType> GetDataUsingDataContractAsync(WcfServiceApp.MyServiceLibrary.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetAbonement", ReplyAction="http://tempuri.org/IConnectService/GetAbonementResponse")]
        WcfServiceApp.MyServiceLibrary.AbonementBasic GetAbonement(string personName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetAbonement", ReplyAction="http://tempuri.org/IConnectService/GetAbonementResponse")]
        System.Threading.Tasks.Task<WcfServiceApp.MyServiceLibrary.AbonementBasic> GetAbonementAsync(string personName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/SetAbonement", ReplyAction="http://tempuri.org/IConnectService/SetAbonementResponse")]
        void SetAbonement(WcfServiceApp.MyServiceLibrary.AbonementBasic abonement, string personName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/SetAbonement", ReplyAction="http://tempuri.org/IConnectService/SetAbonementResponse")]
        System.Threading.Tasks.Task SetAbonementAsync(WcfServiceApp.MyServiceLibrary.AbonementBasic abonement, string personName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetText", ReplyAction="http://tempuri.org/IConnectService/GetTextResponse")]
        string GetText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/GetText", ReplyAction="http://tempuri.org/IConnectService/GetTextResponse")]
        System.Threading.Tasks.Task<string> GetTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/SetText", ReplyAction="http://tempuri.org/IConnectService/SetTextResponse")]
        bool SetText(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectService/SetText", ReplyAction="http://tempuri.org/IConnectService/SetTextResponse")]
        System.Threading.Tasks.Task<bool> SetTextAsync(string text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectServiceChannel : WcfServiceApp.MyServiceLibrary.IConnectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectServiceClient : System.ServiceModel.ClientBase<WcfServiceApp.MyServiceLibrary.IConnectService>, WcfServiceApp.MyServiceLibrary.IConnectService {
        
        public ConnectServiceClient() {
        }
        
        public ConnectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConnectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WcfServiceApp.MyServiceLibrary.CompositeType GetDataUsingDataContract(WcfServiceApp.MyServiceLibrary.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WcfServiceApp.MyServiceLibrary.CompositeType> GetDataUsingDataContractAsync(WcfServiceApp.MyServiceLibrary.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public WcfServiceApp.MyServiceLibrary.AbonementBasic GetAbonement(string personName) {
            return base.Channel.GetAbonement(personName);
        }
        
        public System.Threading.Tasks.Task<WcfServiceApp.MyServiceLibrary.AbonementBasic> GetAbonementAsync(string personName) {
            return base.Channel.GetAbonementAsync(personName);
        }
        
        public void SetAbonement(WcfServiceApp.MyServiceLibrary.AbonementBasic abonement, string personName) {
            base.Channel.SetAbonement(abonement, personName);
        }
        
        public System.Threading.Tasks.Task SetAbonementAsync(WcfServiceApp.MyServiceLibrary.AbonementBasic abonement, string personName) {
            return base.Channel.SetAbonementAsync(abonement, personName);
        }
        
        public string GetText() {
            return base.Channel.GetText();
        }
        
        public System.Threading.Tasks.Task<string> GetTextAsync() {
            return base.Channel.GetTextAsync();
        }
        
        public bool SetText(string text) {
            return base.Channel.SetText(text);
        }
        
        public System.Threading.Tasks.Task<bool> SetTextAsync(string text) {
            return base.Channel.SetTextAsync(text);
        }
    }
}
